% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calltree.R
\name{calltrace}
\alias{calltrace}
\title{Capture a call trace.}
\usage{
calltrace(top_env = NULL)
}
\arguments{
\item{top_env}{If non-null, this will be used to automatically trim the
call trace to only show calls after the last occurence of this enviroment.
This is needed when the code that calls \code{calltree()} is run indirectly,
for example in tests, or inside an RMarkdown document.}
}
\description{
A call trace captures sequence of calls that lead to the current function,
sometimes called the call stack. Because of lazy evaluation, the call
stack in R is actually a tree, which the print method of this object will
reveal.
}
\examples{
f <- function() g()
g <- function() h()
h <- function() calltrace()

# When no lazy evaluation is involved the calltrack is linear
# (i.e. every call has only one child)
f()

# Lazy evaluation introduces a tree like structure
identity(identity(f()))
identity(try(f()))
try(identity(f()))

# When printing, you can request to simplify this tree to only show
# the direct sequence of calls that lead to `calltrace()`
x <- try(identity(f()))
x
print(x, simplify = TRUE)

# With a little cunning you can also use it to capture the
# tree from within a base NSE function
x <- NULL
with(mtcars, {x <<- f(); 10})
x

# When code is executed indirectly, i.e. via source or within an
# RMarkdown document, you'll tend to get a lot of guff at the beginning
# related to the execution environment:
source(textConnection("f()"), echo = TRUE)

# To automatically strip this off, pass `top_env = globalenv()`
# That will automatically trim of calls prior to the last appearance
# of the global environment on the stack
h <- function() calltrace(globalenv())
source(textConnection("f()"), echo = TRUE)

}
