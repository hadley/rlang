% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/env.R
\name{env_mask}
\alias{env_mask}
\title{Mask symbols with a new child environment}
\usage{
env_mask(.env, ...)
}
\arguments{
\item{.env}{An environment or an object bundling an environment,
e.g. a formula, \link[=quotation]{quosure} or \link[=is_closure]{closure}.
This argument is passed to \code{\link[=get_env]{get_env()}}.}

\item{...}{Pairs of names and expressions, values or
functions. These dots support splicing (with varying semantics,
see above) and name unquoting.}
}
\value{
A new child of \code{.env} containing bindings to \code{...} arguments.
}
\description{
\code{env_mask()} is like \code{\link[=env_bind]{env_bind()}} but it creates the bindings in a
new child environment (i.e. a masking environment). The objects in
this deeper environment have precedence over those in parent
environments.

Unlike \code{env_bind()}, this function does not have side effects and
returns a new environment (or object wrapping that environment).
}
\examples{
orig_env <- env(a = 10)
fn <- set_env(function() a, orig_env)

# fn() currently sees `a` as the value `10`:
fn()

# env_mask() creates a new masking environment in which the
# supplied objects have precedence:
fn <- env_mask(fn, a = 1000)
fn()

# Note that the original binding still exists deeper in the scope:
env_parent(fn)$a
}
\seealso{
\code{\link[=env_bind]{env_bind()}}, \code{\link[=env_unbind]{env_unbind()}}
}
