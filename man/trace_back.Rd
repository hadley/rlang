% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trace.R
\name{trace_back}
\alias{trace_back}
\title{Capture a call trace.}
\usage{
trace_back(to = NULL)
}
\arguments{
\item{to}{If non-null, this should be a frame environment. The
backtrace will only be recorded up to that frame. This is needed
in particular when you call \code{trace_back()} indirectly or from a
larger context, for example in tests or inside an RMarkdown
document where you don't want all the knitr evaluation mechanism
to appear in the backtrace.}
}
\description{
A call trace captures sequence of calls that lead to the current function,
sometimes called the call stack. Because of lazy evaluation, the call
stack in R is actually a tree, which the print method of this object will
reveal.
}
\examples{
# Trim backtraces automatically (this improves the generated
# documentation for the rlang website and the same trick can be
# useful within knitr documents):
options(rlang_trace_top_env = current_env())

f <- function() g()
g <- function() h()
h <- function() trace_back()

# When no lazy evaluation is involved the backtrace is linear
# (i.e. every call has only one child)
f()

# Lazy evaluation introduces a tree like structure
identity(identity(f()))
identity(try(f()))
try(identity(f()))

# When printing, you can request to simplify this tree to only show
# the direct sequence of calls that lead to `trace_back()`
x <- try(identity(f()))
x
print(x, simplify = "trail")

# With a little cunning you can also use it to capture the
# tree from within a base NSE function
x <- NULL
with(mtcars, {x <<- f(); 10})
x

# When code is executed indirectly, i.e. via source or within an
# RMarkdown document, you'll tend to get a lot of guff at the beginning
# related to the execution environment:
source(textConnection("f()"), echo = TRUE)

# To automatically strip this off, pass `to = globalenv()`
# That will automatically trim of calls prior to the last appearance
# of the global environment on the stack
h <- function() trace_back(globalenv())
source(textConnection("f()"), echo = TRUE)

# Restore defaults
options(rlang_trace_top_env = NULL)
}
